<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE codetemplates PUBLIC  "-//NetBeans//DTD Editor Code Templates settings 1.0//EN"
                                "http://www.netbeans.org/dtds/EditorCodeTemplates-1_0.dtd">

<codetemplates>

    <codetemplate abbreviation="vm">
        <code>
<![CDATA[function RootViewModel() {
}
$(document).ready(
        function ()
        {
            ko.applyBindings(new RootViewModel());
        }
);
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="ojnavigationlist" xml:space="preserve">
        <code><![CDATA[//'ojs/ojnavigationlist', 'ojs/ojdatacollection-common'        
var appNavData = [
    {
        name: 'Home',
        id: 'home'
    },
    {
        name: 'About',
        id: 'about'
    }];
self.dataSource = new oj.ArrayTableDataSource(appNavData, {idAttribute: 'id'});
]]></code>
    </codetemplate>
    <codetemplate abbreviation="ojrouter">
        <code>
<![CDATA[          var router = oj.Router.rootInstance;
            router.configure({
                'home': {label: 'Home', isDefault: true},
                'about': {label: 'About'}
            });

            function RootViewModel() {
                var self = this;
                self.router = router;
                self.optionChangeHandler = function (event, data) {
                    if (data.value === undefined) {
                        data.value = 'about';
                    }
                    if ('ojAppNav' === event.target.id && event.originalEvent) {
                        self.router.go(data.value);
                    }
                };
            }
            oj.Router.defaults['urlAdapter'] = new oj.Router.urlParamAdapter();
            oj.Router.sync().then(
                    function () {
                        ko.applyBindings(new RootViewModel());
                    });
]]>
        </code>
    </codetemplate>
    <codetemplate abbreviation="ojoffcanvas">
        <code>
<![CDATA[          self.offScreenButtonIconClass = "oj-fwk-icon oj-fwk-icon-hamburger";
        self.appDrawer =
                {
                    "edge": "start",
                    "displayMode": "push",
                    "selector": "#appDrawer",
                    "selection": "selectedItem"
                };
        self.toggleAppDrawer = function ()
        {
            return oj.OffcanvasUtils.toggle(self.appDrawer);
        };
         //
        // Close off-screen content once window becomes larger.
        //
        var query = window.matchMedia("(min-width: 39.375rem)");
        var mqListener = function (event)
        {
            oj.OffcanvasUtils.close(self.appDrawer);
        };
        query.addListener(mqListener);
]]>
        </code>
    </codetemplate>
</codetemplates>
